package atm.business.server.services;

import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;

import java.math.BigDecimal;
import java.sql.SQLException;

import org.junit.Before;
import org.junit.Test;

import atm.business.api.model.BankUser;
import atm.business.api.services.BankServiceException;
import data.BankDAO;

public class AccountServiceImplTest {

	AccountServiceImpl accountServiceImpl = new AccountServiceImpl();
	BankDAO bankDao = new BankDAO() {

		@Override
		public String selectAllCustomerNames() throws SQLException, Exception {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public BigDecimal getBalance(long subAccountId) throws SQLException,
				Exception {
			if (Long.valueOf("1").equals(subAccountId)) {
				return BigDecimal.ONE;
			} else {
				return null;
			}
		}

		@Override
		public boolean authenticate(String cardNumber, String pinNumber)
				throws SQLException, Exception {
			// TODO Auto-generated method stub
			return false;
		}
	};
	@Before
	public void setup(){
		accountServiceImpl.setBankDAO(bankDao);
	}
	
	@Test
	public void testEqualsUserBalance() throws BankServiceException  {
		BankUser bankUser = new BankUser();
		bankUser.setCardNumber("1");
		BigDecimal result = accountServiceImpl.getUserBalance(bankUser);
		assertEquals(BigDecimal.ONE, result);
	}
	
	@Test
	public void testNotEqualsUserBalance() throws BankServiceException  {
		BankUser bankUser = new BankUser();
		bankUser.setCardNumber("1");
		BigDecimal result = accountServiceImpl.getUserBalance(bankUser);
		assertNotSame( BigDecimal.TEN, result);
	}
	
	@Test
	public void testExpectingConverionInability() throws BankServiceException  {
		BankUser bankUser = new BankUser();
		bankUser.setCardNumber("");
		
		Exception exception = null;
		
		try {
			BigDecimal result = accountServiceImpl.getUserBalance(bankUser);
		} catch(BankServiceException e) {
			exception = e;
		}
		
		
		shouldValidateThrowsExceptionWithMessage(exception, "Unable to convert card number to account ID");
	}
	
	@Test
	public void testExpectingNullPointer() throws BankServiceException  {
		
		BankUser bankUser = new BankUser();
		bankUser.setCardNumber("1");
		
		accountServiceImpl.setBankDAO(null);
		
		Exception exception = null;
		
		try {
			BigDecimal result = accountServiceImpl.getUserBalance(bankUser);
		} catch(BankServiceException e) {
			exception = e;
		}
			
		shouldValidateThrowsExceptionWithMessage(exception, "An Unknown Exception Occurred");
	}	
	
	private void shouldValidateThrowsExceptionWithMessage(final Exception e, final String message) {
	    assertNotNull(e);
	    assertTrue(e.getMessage().contains(message));
	}
}
